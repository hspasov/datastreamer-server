#!/usr/bin/env node

/**
 * Module dependencies.
 */

const fs = require("fs");
const jwt = require("jsonwebtoken");
const path = require("path");
const app = require("../app");
const infoLog = require("debug")("datastreamer-server:info");
const https = require("https");
const mongoose = require("mongoose");
const bluebird = require("bluebird");
const redis = require("redis");
const redisClient = redis.createClient({ detect_buffers: true });
const redisSocketIoAdapter = require("socket.io-redis");
const config = require("../config/config");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/*
 * Connect to mongo
 */

mongoose.Promise = global.Promise;
mongoose.connect(config.dbURL, {
    useMongoClient: true
});
const db = mongoose.connection;

db.on("error", function (error) {
    infoLog(`There was a db connection error: ${error.message}.`);
});

db.once("conected", function () {
    infoLog(`DB connected to ${config.dbURL}`);
});

db.once("disconnected", function () {
    infoLog(`DB disconnecred from ${config.dbURL}`);
});

redisClient.on("error", error => {
    infoLog(`Redis client error: ${error}`);
});

/*
 * Connect to redis
 */

bluebird.promisifyAll(redis.RedisClient.prototype);
bluebird.promisifyAll(redis.Multi.prototype);
bluebird.promisifyAll(jwt);
bluebird.promisifyAll(fs);

const options = {
    key: fs.readFileSync(path.join(__dirname, "../config/server.key")),
    cert: fs.readFileSync(path.join(__dirname, "../config/server.crt"))
};

const server = https.createServer(options, app);

server.listen(port);
server.on("error", onError);
server.on("listening", () => onListening(server));

/**
 * Socket.io
 */

const io = require("socket.io").listen(server);
io.adapter(redisSocketIoAdapter({ host: "localhost", port: 6379 }));
require("../sockets/base")(io);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        infoLog(`${bind} + requires elevated privileges`);
        process.exit(1);
        break;
    case "EADDRINUSE":
        infoLog(`${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    const addr = server.address();
    const bind = typeof addr === "string"
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    infoLog(`Listening on ${bind}`);
}
